import mongoose from "mongoose";
const { Schema, model } = mongoose;

const TaskSchema = new Schema(
  {
    // User reference
    userId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      required: true,
      index: true,
    },

    // Task details
    title: {
      type: String,
      required: true,
      trim: true,
      maxlength: 200,
    },

    note: {
      type: String,
      trim: true,
      default: "",
    },

    // Scheduling
    weekdays: {
      type: [Number],
      required: true,
      validate: {
        validator: function (arr) {
          return arr.length > 0 && arr.every((day) => day >= 0 && day <= 6);
        },
        message: "Weekdays must be an array of numbers between 0-6",
      },
    },

    timeRange: {
      start: {
        type: String,
        required: true,
        match: /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/,
      },
      end: {
        type: String,
        required: true,
        match: /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/,
      },
    },

    // Appearance
    color: {
      type: String,
      match: /^#[0-9A-F]{6}$/i,
      default: "#3B82F6", // Default blue color
    },

    // Status
    isActive: {
      type: Boolean,
      default: true,
    },

    // Auto-generation metadata
    isAutoGenerated: {
      type: Boolean,
      default: false,
    },

    learningGoalId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "LearningGoal",
      required: false,
    },

    // Completion tracking
    isCompleted: {
      type: Boolean,
      default: false,
    },

    completedAt: {
      type: Date,
      default: null,
    },

    // Daily completion tracking (for recurring tasks)
    dailyCompletions: [{
      date: {
        type: String, // Format: "YYYY-MM-DD"
        required: true,
      },
      completedAt: {
        type: Date,
        default: Date.now,
      },
      isCompleted: {
        type: Boolean,
        default: true,
      }
    }],
  },
  {
    timestamps: true, // Adds createdAt and updatedAt
    collection: "tasks",
  }
);

// Indexes for better performance
TaskSchema.index({ userId: 1, isActive: 1 });
TaskSchema.index({ userId: 1, weekdays: 1 });
TaskSchema.index({ createdAt: -1 });

// Validation middleware
TaskSchema.pre("save", function (next) {
  // Validate that end time is after start time
  const startMinutes = timeToMinutes(this.timeRange.start);
  const endMinutes = timeToMinutes(this.timeRange.end);

  if (endMinutes <= startMinutes) {
    next(new Error("End time must be after start time"));
  } else {
    next();
  }
});

// Helper function
function timeToMinutes(timeString) {
  const [hours, minutes] = timeString.split(":").map(Number);
  return hours * 60 + minutes;
}

// Virtual field to check if task is in the past
TaskSchema.virtual('isPastTask').get(function() {
  const today = new Date();
  const currentDay = today.getDay();
  
  // A task is past if ALL its weekdays are before current day
  return this.weekdays.every(day => day < currentDay);
});

// Virtual field to get effective completion status (considering past tasks)
TaskSchema.virtual('effectiveIsCompleted').get(function() {
  const today = new Date().toISOString().split('T')[0];
  
  // For auto-generated tasks, check daily completion
  if (this.isAutoGenerated && this.dailyCompletions) {
    const todayCompletion = this.dailyCompletions.find(c => c.date === today);
    return todayCompletion ? todayCompletion.isCompleted : false;
  }
  
  // For manual tasks, return actual completion status
  return this.isCompleted || false;
});

// Method to auto-complete past tasks
TaskSchema.methods.autoCompleteIfPast = function() {
  // Only auto-complete auto-generated tasks that are in the past
  if (this.isPastTask && this.isAutoGenerated) {
    const today = new Date().toISOString().split('T')[0];
    
    // For auto-generated tasks, mark today as completed
    if (this.dailyCompletions) {
      const existingCompletion = this.dailyCompletions.find(c => c.date === today);
      if (!existingCompletion) {
        this.dailyCompletions.push({
          date: today,
          completedAt: new Date(),
          isCompleted: true
        });
      }
    }
  }
  return this;
};

// Pre-save middleware to auto-complete past tasks
TaskSchema.pre('save', function(next) {
  this.autoCompleteIfPast();
  next();
});

export const Task = model("Task", TaskSchema);
