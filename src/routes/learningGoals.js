import { Router } from "express";
import { z } from "zod";
import { LearningGoal } from "../models/LearningGoal.js";
import { AutoTaskGenerator } from "../services/AutoTaskGenerator.js";
import { User } from "../models/User.js";

const r = Router();

// Validation schema - đơn giản theo model mới
const LearningGoalBody = z.object({
  subject: z.string().min(1).max(100),
  description: z.string().optional(),
  targetHoursPerDay: z.number().min(0.25).max(8),
});

// GET /api/learning-goals - Get all learning goals
r.get("/", async (req, res) => {
  try {
    const { uid } = req;

    // Tìm user trong DB bằng Firebase UID
    const user = await User.findOne({ firebaseUid: uid });
    if (!user) {
      return res.status(404).json({ error: "User not found" });
    }

    const { isActive = true, category, priority } = req.query;
    const filter = { userId: user._id };
    if (isActive !== undefined) filter.isActive = isActive === "true";
    if (category) filter.category = category;
    if (priority) filter.priority = priority;

    const goals = await LearningGoal.find(filter)
      .sort({ priority: -1, createdAt: 1 })
      .lean();

    res.json({ goals });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// GET /api/learning-goals/:id - Get specific learning goal
r.get("/:id", async (req, res) => {
  try {
    const { userId } = req;
    const { id } = req.params;

    const goal = await LearningGoal.findOne({ _id: id, userId }).lean();
    if (!goal) {
      return res.status(404).json({ error: "Learning goal not found" });
    }

    res.json(goal);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// POST /api/learning-goals - Create new learning goal
r.post("/", async (req, res) => {
  try {
    const { user } = req;
    if (!user) {
      return res.status(401).json({ error: "Authentication required" });
    }

    const data = LearningGoalBody.parse(req.body);

    const goal = await LearningGoal.create({
      ...data,
      userId: user._id,
    });

    try {
      const autoTasks = await AutoTaskGenerator.generateTasksFromLearningGoal(
        user._id,
        goal
      );
      console.log(
        `✅ Auto-generated ${autoTasks.length} tasks for learning goal: ${goal.subject}`
      );
    } catch (error) {
      console.error("❌ Error auto-generating tasks:", error);
    }

    res.status(201).json(goal);
  } catch (error) {
    if (error.name === "ZodError") {
      return res.status(400).json({
        error: "Invalid input data",
        details: error.issues,
      });
    }
    res.status(500).json({ error: error.message });
  }
});

r.put("/:id", async (req, res) => {
  try {
    const { userId } = req;
    const { id } = req.params;
    const updates = LearningGoalBody.partial().parse(req.body);

    const goal = await LearningGoal.findOneAndUpdate(
      { _id: id, userId },
      { $set: updates },
      { new: true, runValidators: true }
    );

    if (!goal) {
      return res.status(404).json({ error: "Learning goal not found" });
    }

    const importantFields = [
      "targetHoursPerDay",
      "preferredTimeSlots",
      "sessionLength",
      "isActive",
    ];
    const hasImportantChanges = Object.keys(updates).some((key) =>
      importantFields.includes(key)
    );

    if (hasImportantChanges && goal.isActive) {
      try {
        const autoTasks = await AutoTaskGenerator.updateTasksForLearningGoal(
          uid,
          goal
        );
        console.log(
          `✅ Updated ${autoTasks.length} auto-generated tasks for: ${goal.subject}`
        );
      } catch (error) {
        console.error("❌ Error updating auto-generated tasks:", error);
      }
    }

    res.json(goal);
  } catch (error) {
    if (error.name === "ZodError") {
      return res.status(400).json({
        error: "Invalid input data",
        details: error.issues,
      });
    }
    res.status(500).json({ error: error.message });
  }
});

// DELETE /api/learning-goals/:id - Delete learning goal
r.delete("/:id", async (req, res) => {
  try {
    const { userId } = req;
    const { id } = req.params;

    const result = await LearningGoal.deleteOne({ _id: id, userId });

    if (result.deletedCount === 0) {
      return res.status(404).json({ error: "Learning goal not found" });
    }

    // Xóa các auto-generated tasks
    try {
      await AutoTaskGenerator.removeAutoGeneratedTasks(id);
      console.log(`✅ Removed auto-generated tasks for learning goal: ${id}`);
    } catch (error) {
      console.error("❌ Error removing auto-generated tasks:", error);
    }

    res.json({ message: "Learning goal deleted successfully" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// GET /api/learning-goals/active/priority - Get active goals sorted by priority
r.get("/active/priority", async (req, res) => {
  try {
    const { userId } = req;

    const goals = await LearningGoal.getActiveGoalsByPriority(uid);

    res.json({ goals });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// POST /api/learning-goals/:id/progress - Update progress for a learning goal
r.post("/:id/progress", async (req, res) => {
  try {
    const { userId } = req;
    const { id } = req.params;
    const { hoursStudied, studyDate } = req.body;

    if (!hoursStudied || hoursStudied <= 0) {
      return res.status(400).json({
        error: "hoursStudied must be a positive number",
      });
    }

    const goal = await LearningGoal.findOne({ _id: id, userId });
    if (!goal) {
      return res.status(404).json({ error: "Learning goal not found" });
    }

    await goal.updateProgress(
      hoursStudied,
      studyDate ? new Date(studyDate) : new Date()
    );

    res.json({
      message: "Progress updated successfully",
      totalHours: goal.totalHoursCompleted,
      currentStreak: goal.currentStreak,
      longestStreak: goal.longestStreak,
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// GET /api/learning-goals/stats/overview - Get overview statistics
r.get("/stats/overview", async (req, res) => {
  try {
    const { userId } = req;

    const goals = await LearningGoal.find({ userId }).lean();

    const stats = {
      total: goals.length,
      active: goals.filter((g) => g.isActive).length,
      totalHours: goals.reduce((sum, g) => sum + g.totalHoursCompleted, 0),
      averageStreak:
        goals.length > 0
          ? goals.reduce((sum, g) => sum + g.currentStreak, 0) / goals.length
          : 0,
      byCategory: {},
      byPriority: {
        high: goals.filter((g) => g.priority === "high").length,
        medium: goals.filter((g) => g.priority === "medium").length,
        low: goals.filter((g) => g.priority === "low").length,
      },
    };

    // Group by category
    goals.forEach((goal) => {
      if (!stats.byCategory[goal.category]) {
        stats.byCategory[goal.category] = 0;
      }
      stats.byCategory[goal.category]++;
    });

    res.json(stats);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// POST /api/learning-goals/:id/toggle - Toggle active status
r.post("/:id/toggle", async (req, res) => {
  try {
    const { userId } = req;
    const { id } = req.params;

    const goal = await LearningGoal.findOne({ _id: id, userId });
    if (!goal) {
      return res.status(404).json({ error: "Learning goal not found" });
    }

    goal.isActive = !goal.isActive;
    await goal.save();

    res.json({
      message: `Learning goal ${goal.isActive ? "activated" : "deactivated"}`,
      isActive: goal.isActive,
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

export default r;
